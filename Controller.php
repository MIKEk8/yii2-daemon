<?php
/**
 * Created by PhpStorm.
 * User: ema
 * Date: 20.11.2018
 * Time: 17:44
 */

namespace mikek8\daemon;

use yii\base\Exception;
use yii\console\ExitCode;
use yii\helpers\Console;

class Controller extends \yii\console\Controller
{
    const VERSION = '1.0.0';

    public $defaultAction = 'start';

    public $pidDir = '@runtime/daemons';

    public $daemon_name = 'daemon';

    public $worker_groups = [];

    /**
     * @var ProcessManager;
     */
    protected $pm;

    /**
     * @param \yii\base\Action $action
     * @return bool
     * @throws Exception
     */
    public function beforeAction($action)
    {
        $this->pm = new ProcessManager($this->daemon_name);
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @throws \yii\base\Exception
     */
    public function actionStart($groups = null)
    {
        $groups = \is_array($groups) ? $groups : [$groups];
        switch ($this->pm->getStatus()['watcher']) {
            case ProcessManager::ON:
                Console::output('Service is already running!');
                return ExitCode::OK;
                break;
            case ProcessManager::OFF :
                Console::output('Service starting ...');
                $this->pm->run($this->worker_groups);
                return ExitCode::OK;
                break;
            case ProcessManager::WAIT:
                Console::output('The service is already running, but is paused.');
                $this->pm->play();
                return ExitCode::OK;
                break;
            default:
                Console::error('UNSPECIFIED ERROR');
                return ExitCode::UNSPECIFIED_ERROR;
        }
    }

    public function actionStop($groups)
    {
        $groups = \is_array($groups) ? $groups : [$groups];
        switch ($this->pm->getStatus()['watcher']) {
            case ProcessManager::ON:
                Console::output('Service is already running!');
                return ExitCode::OK;
                break;
            case ProcessManager::OFF :
                Console::output('Service starting ...');
                $this->pm->run($this->worker_groups);
                return ExitCode::OK;
                break;
            case ProcessManager::WAIT:
                Console::output('The service is already running, but is paused.');
                $this->pm->play();
                return ExitCode::OK;
                break;
            default:
                Console::error('UNSPECIFIED ERROR');
                return ExitCode::UNSPECIFIED_ERROR;
        }
    }

    public function actionForcedStop($groups)
    {
        $groups = \is_array($groups) ? $groups : [$groups];

    }

    public function actionRestart($groups)
    {
        $groups = \is_array($groups) ? $groups : [$groups];

    }

    public function actionStatus($groups)
    {
        $groups = \is_array($groups) ? $groups : [$groups];

    }

    public function actionPause($groups)
    {
        $groups = \is_array($groups) ? $groups : [$groups];

    }
}